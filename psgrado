#include <GL/glut.h>

class Building {
public:
    float width;//ancho
    float height;//altura
    float depth;//projundidad

    Building(float lado) : width(lado), height(lado), depth(lado) {}

    void draw() {
        // Color gris para el edificio
        glColor3f(0.5f, 0.5f, 0.5f); // Gris

        // Edificio principal
        glBegin(GL_QUADS);
        // Cara frontal
        glVertex3f(-width / 2, 0.0, depth / 2);
        glVertex3f(width / 2, 0.0, depth / 2);
        glVertex3f(width / 2, height / 2, depth / 2);
        glVertex3f(-width / 2, height / 2, depth / 2);

        // Cara trasera
        glVertex3f(-width / 2, 0.0, -depth / 2);
        glVertex3f(-width / 2, height / 2, -depth / 2);
        glVertex3f(width / 2, height / 2, -depth / 2);
        glVertex3f(width / 2, 0.0, -depth / 2);

        // Cara derecha
        glVertex3f(width / 2, 0.0, depth / 2);
        glVertex3f(width / 2, 0.0, -depth / 2);
        glVertex3f(width / 2, height / 2, -depth / 2);
        glVertex3f(width / 2, height / 2, depth / 2);

        // Cara izquierda
        glVertex3f(-width / 2, 0.0, -depth / 2);
        glVertex3f(-width / 2, 0.0, depth / 2);
        glVertex3f(-width / 2, height / 2, depth / 2);
        glVertex3f(-width / 2, height / 2, -depth / 2);
        glEnd();

        // Cara inferior
        glBegin(GL_QUADS);
        glVertex3f(width / 2, 0.0, -depth / 2);
        glVertex3f(width / 2, 0.0, depth / 2);
        glVertex3f(-width / 2, 0.0, depth / 2);
        glVertex3f(-width / 2, 0.0, -depth / 2);
        glEnd();

        // Techo (color rojo oscuro)
        glColor3f(0.5f, 0.0f, 0.0f); // Rojo oscuro
        glBegin(GL_QUADS);
        // Techo
        glVertex3f(-width / 2, height / 2, depth / 2);
        glVertex3f(width / 2, height / 2, depth / 2);
        glVertex3f(width / 2, height / 2, -depth / 2);
        glVertex3f(-width / 2, height / 2, -depth / 2);
        glEnd();

        // Pared superior
        glBegin(GL_QUADS);
        glVertex3f(-width / 2, height / 2, depth / 2);
        glVertex3f(width / 2, height / 2, depth / 2);
        glVertex3f(width / 2, height, depth / 2);
        glVertex3f(-width / 2, height, depth / 2);

        glVertex3f(-width / 2, height / 2, -depth / 2);
        glVertex3f(-width / 2, height, -depth / 2);
        glVertex3f(width / 2, height, -depth / 2);
        glVertex3f(width / 2, height / 2, -depth / 2);
        glEnd();
    }
};

class Camera {
public:
    float camaraZ;
    float camarax;
    float camaray;
    float rotacionX;
    float rotacionY;

    Camera() : camaraZ(25.0), camarax(0.0), camaray(5.0), rotacionX(0.0), rotacionY(0.0) {}

    void applyView() {
        glLoadIdentity();
        gluLookAt(camarax, camaray, camaraZ, 0.0, 5.0, 0.0, 0.0, 1.0, 0.0);
        glRotatef(rotacionX, 0.0, 1.0, 0.0);
        glRotatef(rotacionY, 1.0, 0.0, 0.0);
    }
};

Building building(20.0); // Tamaño del edificio
Camera camera;

// Función de visualización
void display() {
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    camera.applyView();
    building.draw();
    glutSwapBuffers();
}

// Función de re-dimensionamiento
void reshape(int width, int height) {
    glViewport(0, 0, width, height);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(45.0, (float)width / (float)height, 0.1, 100.0);
    glMatrixMode(GL_MODELVIEW);
}

// Función de entrada de teclado
void keyboard(unsigned char key, int x, int y) {
    switch (key) {
    case 'a': camera.camarax -= 1.0; break;
    case 'd': camera.camarax += 1.0; break;
    case 'w': camera.camaraZ -= 1.0; break;
    case 's': camera.camaraZ += 1.0; break;
    default: break;
    }
    glutPostRedisplay();
}

// Función de entrada de teclado especial
void specialKeyboard(int key, int x, int y) {
    switch (key) {
    case GLUT_KEY_LEFT: camera.rotacionX -= 5.0; break;
    case GLUT_KEY_RIGHT: camera.rotacionX += 5.0; break;
    case GLUT_KEY_DOWN: camera.rotacionY -= 5.0; break;
    case GLUT_KEY_UP: camera.rotacionY += 5.0; break;
    default: break;
    }
    glutPostRedisplay();
}

// Inicialización
void init() {
    glEnable(GL_DEPTH_TEST);
    glClearColor(0.0, 0.0, 0.0, 1.0);
}

// Función principal
int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
    glutInitWindowSize(800, 600);
    glutCreateWindow("Edificio 3D");
    init();
    glutDisplayFunc(display);
    glutReshapeFunc(reshape);
    glutKeyboardFunc(keyboard);
    glutSpecialFunc(specialKeyboard);
    glutMainLoop();
    return 0;
}

